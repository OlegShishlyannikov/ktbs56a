#include <string>
#include <map>

#define ASCII_CTRL_CH_NUL std::string( "\x0" )
#define ASCII_CTRL_CH_SOH std::string( "\x1" )
#define ASCII_CTRL_CH_STX std::string( "\x2" )
#define ASCII_CTRL_CH_ETX std::string( "\x3" )
#define ASCII_CTRL_CH_EOT std::string( "\x4" )
#define ASCII_CTRL_CH_ENQ std::string( "\x5" )
#define ASCII_CTRL_CH_ACK std::string( "\x6" )
#define ASCII_CTRL_CH_BEL std::string( "\x7" )
#define ASCII_CTRL_CH_BS std::string( "\x8" )
#define ASCII_CTRL_CH_TAB std::string( "\x9" )
#define ASCII_CTRL_CH_LF std::string( "\xa" )
#define ASCII_CTRL_CH_VT std::string( "\xb" )
#define ASCII_CTRL_CH_FF std::string( "\xc" )
#define ASCII_CTRL_CH_CR std::string( "\xd" )
#define ASCII_CTRL_CH_SO std::string( "\xe" )
#define ASCII_CTRL_CH_SI std::string( "\xf" )
#define ASCII_CTRL_CH_DLE std::string( "\x10" )
#define ASCII_CTRL_CH_DC1 std::string( "\x11" )
#define ASCII_CTRL_CH_DC2 std::string( "\x12" )
#define ASCII_CTRL_CH_DC3 std::string( "\x13" )
#define ASCII_CTRL_CH_DC4 std::string( "\x14" )
#define ASCII_CTRL_CH_NAK std::string( "\x15" )
#define ASCII_CTRL_CH_SYN std::string( "\x16" )
#define ASCII_CTRL_CH_ETB std::string( "\x17" )
#define ASCII_CTRL_CH_CAN std::string( "\x18" )
#define ASCII_CTRL_CH_EM std::string( "\x19" )
#define ASCII_CTRL_CH_SUB std::string( "\x1a" )
#define ASCII_CTRL_CH_ESC std::string( "\x1b" )
#define ASCII_CTRL_CH_FS std::string( "\x1c" )
#define ASCII_CTRL_CH_GS std::string( "\x1d" )
#define ASCII_CTRL_CH_RS std::string( "\x1e" )
#define ASCII_CTRL_CH_US std::string( "\x1f" )
#define ASCII_CTRL_CH_DEL std::string( "\x7f" )
	
#define ASCII_EXT_CH_LETTER_CAP_C_CEDILLA std::string( "Ç" )
#define ASCII_EXT_CH_LETTER_U_UMLAUT std::string( "ü" )
#define ASCII_EXT_CH_LETTER_E_ACUTE std::string( "é" )
#define ASCII_EXT_CH_A_CIRCUMFLEX std::string( "â" )
#define ASCII_EXT_CH_A_UMLAUT std::string( "ä" )
#define ASCII_EXT_CH_A_ACCENT std::string( "à" )
#define ASCII_EXT_CH_A_RING std::string( "å" )
#define ASCII_EXT_CH_C_CEDILLA std::string( "ç" )
#define ASCII_EXT_CH_E_CIRCUMFLEX std::string( "ê" )
#define ASCII_EXT_CH_E_UMLAUTS std::string( "ë" )
#define ASCII_EXT_CH_E_ACCENT std::string( "è" )
#define ASCII_EXT_CH_I_UMLAUT std::string( "ï" )
#define ASCII_EXT_CH_I_CIRCUMFLEX std::string( "î" )
#define ASCII_EXT_CH_I_ACCENT std::string( "ì" )
#define ASCII_EXT_CH_CAP_A_UMLAUT std::string( "Ä" )
#define ASCII_EXT_CH_CAP_A_RING std::string( "Å" )
#define ASCII_EXT_CH_CAP_E_ACUTE std::string( "É" )
#define ASCII_EXT_CH_AE std::string( "æ" )
#define ASCII_EXT_CH_CAP_AE std::string( "Æ" )
#define ASCII_EXT_CH_O_CIRCUMFLEX std::string( "ô" )
#define ASCII_EXT_CH_O_UMLAUT std::string( "ö" )
#define ASCII_EXT_CH_O_ACCENT std::string( "ò" )
#define ASCII_EXT_CH_U_CIRCUMFLEX std::string( "û" )
#define ASCII_EXT_CH_U_ACCENT std::string( "ù" )
#define ASCII_EXT_CH_Y_UMLAUT std::string( "ÿ" )
#define ASCII_EXT_CH_CAP_O_UMLAUT std::string( "Ö" )
#define ASCII_EXT_CH_CAP_U_UMLAUT std::string( "Ü" )
#define ASCII_EXT_CH_SLASHED_ZERO std::string( "ø" )
#define ASCII_EXT_CH_POUND std::string( "£" )
#define ASCII_EXT_CH_CAP_SLASHED_ZERO std::string( "Ø" )
#define ASCII_EXT_CH_MULT std::string( "×" )
#define ASCII_EXT_CH_FLORIN_SIGN std::string( "ƒ" )
#define ASCII_EXT_CH_A_ACUTE std::string( "á" )
#define ASCII_EXT_CH_I_ACUTE std::string( "í" )
#define ASCII_EXT_CH_O_ACUTE std::string( "ó" )
#define ASCII_EXT_CH_U_ACUTE std::string( "ú" )
#define ASCII_EXT_CH_N_TILDE std::string( "ñ" )
#define ASCII_EXT_CH_CAP_N_TILDE std::string( "Ñ" )
#define ASCII_EXT_CH_FEMININE_IND std::string( "ª" )
#define ASCII_EXT_CH_MASCILINE_IND std::string( "º" )
#define ASCII_EXT_CH_INV_QUESTION std::string( "¿" )
#define ASCII_EXT_CH_REG_TRADEMARK std::string( "®" )
#define ASCII_EXT_CH_LOGIC_NEG std::string( "¬" )
#define ASCII_EXT_CH_ONE_HALF std::string( "½" )
#define ASCII_EXT_CH_ONE_FOURTH std::string( "¼" )
#define ASCII_EXT_CH_INV_EXCL std::string( "¡" )
#define ASCII_EXT_CH_RIGHT_GUILLEMETS std::string( "«" )
#define ASCII_EXT_CH_LEFT_GUILLEMETS std::string( "»" )
#define ASCII_EXT_CH_LD_DOTTED_GCH std::string( "░" )
#define ASCII_EXT_CH_MD_DOTTED_GCH std::string( "▒" )
#define ASCII_EXT_CH_HD_DOTTED_GCH std::string( "▓" )
#define ASCII_EXT_CH_BDS_SINGLE_VERT_LINE std::string( "│" )
#define ASCII_EXT_CH_BDS_SINGLE_VERT_LEFT_LINE std::string( "┤" )
#define ASCII_EXT_CH_CAP_A_ACUTE std::string( "Á" )
#define ASCII_EXT_CH_CAP_A_CIRCUMFLEX std::string( "Â" )
#define ASCII_EXT_CH_CAP_A_ACCENT std::string( "À" )
#define ASCII_EXT_CH_COPYRIGHT std::string( "©" )
#define ASCII_EXT_CH_BDS_DOUBLE_VERT_LEFT_LINE std::string( "╣" )
#define ASCII_EXT_CH_BDS_DOUBLE_VERT_LINE std::string( "║" )
#define ASCII_EXT_CH_BDS_DOUBLE_LINE_UPPER_RIGHT_CORNER std::string( "╗" )
#define ASCII_EXT_CH_BDS_DOUBLE_LINE_LOWER_RIGHT_CORNER std::string( "╝" )
#define ASCII_EXT_CH_CENT std::string( "¢" )
#define ASCII_EXT_CH_YEN std::string( "¥" )
#define ASCII_EXT_CH_BDS_SINGLE_LINE_UPPER_RIGHT_CORNER std::string( "┐" )
#define ASCII_EXT_CH_BDS_SINGLE_LINE_LOWER_LEFT_CORNER std::string( "└" )
#define ASCII_EXT_CH_BDS_SINGLE_HOR_UP_LINE std::string( "┴" )
#define ASCII_EXT_CH_BDS_SINGLE_HOR_DOWN_LINE std::string( "┬" )
#define ASCII_EXT_CH_BDS_SINGLE_VERT_RIGHT_LINE std::string( "├" )
#define ASCII_EXT_CH_BDS_SINGLE_HOR_LINE std::string( "─" )
#define ASCII_EXT_CH_BDS_SINGLE_HOR_VERT_LINE std::string( "┼" )
#define ASCII_EXT_CH_A_TILDE std::string( "ã" )
#define ASCII_EXT_CH_CAP_A_TILDE std::string( "Ã" )
#define ASCII_EXT_CH_BDS_DOUBLE_LINE_LOWER_LEFT_CORNER std::string( "╚" )
#define ASCII_EXT_CH_BDS_DOUBLE_LINE_UPPER_LEFT_CORNER std::string( "╔" )
#define ASCII_EXT_CH_BDS_DOUBLE_HOR_UP_LINE std::string( "╩" )
#define ASCII_EXT_CH_BDS_DOUBLE_HOR_DOWN_LINE std::string( "╦" )
#define ASCII_EXT_CH_BDS_DOUBLE_VERT_RIGHT_LINE std::string( "╠" )
#define ASCII_EXT_CH_BDS_DOUBLE_HOR_LINE std::string( "═" )
#define ASCII_EXT_CH_BDS_DOUBLE_HOR_VERT_LINE std::string( "╬" )
#define ASCII_EXT_CH_GEN_CURRENCY std::string( "¤" )
#define ASCII_EXT_CH_LETTER_ETH std::string( "ð" )
#define ASCII_EXT_CH_CAP_LETTER_ETH std::string( "Ð" )
#define ASCII_EXT_CH_CAP_E_CIRCUMFLEX std::string( "Ê" )
#define ASCII_EXT_CH_E_UMLAUT std::string( "Ë" )
#define ASCII_EXT_CH_CAP_E_ACCENT std::string( "È" )
#define ASCII_EXT_CH_DOTLESS_I std::string( "ı" )
#define ASCII_EXT_CH_CAP_I_ACUTE std::string( "Í" )
#define ASCII_EXT_CH_CAP_I_CIRCUMFLEX std::string( "Î" )
#define ASCII_EXT_CH_CAP_I_UMLAUT std::string( "Ï" )
#define ASCII_EXT_CH_BDS_SINGLE_LINE_LOWER_RIGHT_CORNER std::string( "┘" )
#define ASCII_EXT_CH_BDS_SINGLE_LINE_UPPER_LEFT_CORNER std::string( "┌" )
#define ASCII_EXT_CH_BLOCK_GCH std::string( "█" )
#define ASCII_EXT_CH_BOTTOM_HALF_BLOCK_GCH std::string( "▄" )
#define ASCII_EXT_CH_VERT_BROKEN_LINE std::string( "¦" )
#define ASCII_EXT_CH_CAP_I_ACCENT std::string( "Ì" )
#define ASCII_EXT_CH_TOP_HALF_BLOCK std::string( "▀" )
#define ASCII_EXT_CH_CAP_O_ACUTE std::string( "Ó" )
#define ASCII_EXT_CH_LETTER_ESZETT std::string( "ß" )
#define ASCII_EXT_CH_CAP_O_CIRCUMFLEX std::string( "Ô" )
#define ASCII_EXT_CH_CAP_O_ACCENT std::string( "Ò" )
#define ASCII_EXT_CH_O_TILDE std::string( "õ" )
#define ASCII_EXT_CH_CAP_O_TILDE std::string( "Õ" )
#define ASCII_EXT_CH_MU std::string( "µ" )
#define ASCII_EXT_CH_THORN std::string( "þ" )
#define ASCII_EXT_CH_CAP_THORN std::string( "Þ" )
#define ASCII_EXT_CH_CAP_U_ACUTE std::string( "Ú" )
#define ASCII_EXT_CH_CAP_U_CIRCUMFLEX std::string( "Û" )
#define ASCII_EXT_CH_CAP_U_ACCENT std::string( "Ù" )
#define ASCII_EXT_CH_Y_ACCENT std::string( "ý" )
#define ASCII_EXT_CH_CAP_Y_ACCENT std::string( "Ý" )
#define ASCII_EXT_CH_MACRON std::string( "¯" )
#define ASCII_EXT_CH_ACUTE std::string( "´" )
#define ASCII_EXT_CH_CONGUERENCE_RELATION std::string( "≡" )
#define ASCII_EXT_CH_PLUS_MINUS std::string( "±" )
#define ASCII_EXT_CH_UNDERLINE std::string( "‗" )
#define ASCII_EXT_CH_THREE_FOURTH std::string( "¾" )
#define ASCII_EXT_CH_PARAGRAPH std::string( "¶" )
#define ASCII_EXT_CH_SECTION std::string( "§" )
#define ASCII_EXT_CH_DIVISION std::string( "÷" )
#define ASCII_EXT_CH_CEDILLA std::string( "¸" )
#define ASCII_EXT_CH_DEGREE std::string( "°" )
#define ASCII_EXT_CH_DIARESIS std::string( "¨" )
#define ASCII_EXT_CH_INTERPUNCT std::string( "·" )
#define ASCII_EXT_CH_EXP1 std::string( "¹" )
#define ASCII_EXT_CH_EXP3 std::string( "³" )
#define ASCII_EXT_CH_EXP2 std::string( "²" )
#define ASCII_EXT_CH_BLACK_SQUARE std::string( "■" )
#define ASCII_EXT_CH_NBSP std::string( "\xff" )
  
#define ASCII_CONTROL_QUERY_DEVICE_CODE std::string( "\e[c" )
#define ASCII_CONTROL_REPORT_DEVICE_CODE std::string( "\e[%i0c" )
#define ASCII_CONTROL_QUERY_DEVICE_STATUS std::string( "\e[5n" )
#define ASCII_CONTROL_REPORT_DEVICE_OK std::string( "\e[0n" )
#define ASCII_CONTROL_REPORT_DEVICE_FAIL std::string( "\e[3n" )
#define ASCII_CONTROL_QUERY_CURSOR_POS std::string( "\e[6n" )
#define ASCII_CONTROL_REPORT_CURSOR_POS std::string( "\e[%i;%iR" )
#define ASCII_CONTROL_RESET_DEVICE std::string( "\eC" )
#define ASCII_CONTROL_ENABLE_LINE_WRAP std::string( "\e[7h" )
#define ASCII_CONTROL_DISABLE_LINE_WRAP std::string( "\e[7l" )
#define ASCII_CONTROL_CURSOR_HOME std::string( "\e[H" )
#define ASCII_CONTROL_CURSOR_LINE_BEGIN std::string( "\e[1~" )
#define ASCII_CONTROL_INS std::string( "\e[2~" )
#define ASCII_CONTROL_DELETE std::string( "\e[3~" )
#define ASCII_CONTROL_CURSOR_LINE_END std::string( "\e[4~" )
#define ASCII_CONTROL_CURSOR_PAGE_UP std::string( "\e[5~" )
#define ASCII_CONTROL_CURSOR_PAGE_DOWN std::string( "\e[6~" )
#define ASCII_CONTROL_SET_CURSOR_POS std::string( "\e[%i;%if" )
#define ASCII_CONTROL_CURSOR_UP std::string( "\e[A" )
#define ASCII_CONTROL_CURSOR_DOWN std::string( "\e[B" )
#define ASCII_CONTROL_CURSOR_FORWARD std::string( "\e[C" )
#define ASCII_CONTROL_CURSOR_BACKWARD std::string( "\e[D" )
#define ASCII_CONTROL_KBD_CURSOR_CTRL_UP std::string( "\eOA" )
#define ASCII_CONTROL_KBD_CURSOR_CTRL_DOWN std::string( "\eOB" )
#define ASCII_CONTROL_KBD_CURSOR_CTRL_FORWARD std::string( "\eOC" )
#define ASCII_CONTROL_KBD_CURSOR_CTRL_BACKWARD std::string( "\eOD" )

#define ASCII_CONTROL_SAVE_CURSOR std::string( "\e[s" )
#define ASCII_CONTROL_UNSAVE_CURSOR std::string( "\e[u" )
#define ASCII_CONTROL_SAVE_CURSOR_AND_ATTRS std::string( "\e\x7" )
#define ASCII_CONTROL_RESTORE_CURSOR_AND_ATTRS std::string( "\e\x8" )
#define ASCII_CONTROL_SCROLL_SCREEN_ALL std::string( "\e[r" )
#define ASCII_CONTROL_SCROLL_SCREEN_LINE std::string( "\e[%i;%ir" )
#define ASCII_CONTROL_SCROLL_DOWN std::string( "\eD" )
#define ASCII_CONTROL_SCROLL_UP std::string( "\eM" )
#define ASCII_CONTROL_SET_TAB std::string( "\eH" )
#define ASCII_CONTROL_CLEAR_TAB std::string( "\e[g" )
#define ASCII_CONTROL_CLEAR_ALL_TABS std::string( "\e[3g" )
#define ASCII_CONTROL_ERASE_END_OF_LINE std::string( "\e[K" )
#define ASCII_CONTROL_ERASE_START_OF_LINE std::string( "\e[1K" )
#define ASCII_CONTROL_ERASE_LINE std::string( "\e[2K" )
#define ASCII_CONTROL_ERASE_DOWN std::string( "\e[J" )
#define ASCII_CONTROL_ERASE_UP std::string( "\e[1J" )
#define ASCII_CONTROL_ERASE_SCREEN std::string( "\e[2J" )
#define ASCII_CONTROL_SET_ATTRS std::string( "\e[%i;%i;%im" )

#define ASCII_KBD_CTRL_C ( 0x03 )
#define ASCII_KBD_CTRL_Q ( 0x11 )
#define ASCII_KBD_CTRL_A ( 0x01 )
#define ASCII_KBD_CTRL_S ( 0x13 )
#define ASCII_KBD_CTRL_D ( 0x04 )
#define ASCII_KBD_CTRL_Z ( 0x1a )
#define ASCII_KBD_CTRL_X ( 0x18 )
#define ASCII_KBD_CTRL_R ( 0x12 )

#define ASCII_TERM_ATTRS_CLEAR_ALL_ATTRS 0
#define ASCII_TERM_ATTRS_BRIGHT 1
#define ASCII_TERM_ATTRS_DIM 2
#define ASCII_TERM_ATTRS_UNDERSCORE 4
#define ASCII_TERM_ATTRS_BLINK 5
#define ASCII_TERM_ATTRS_REVERSE 7
#define ASCII_TERM_ATTRS_HIDDEN 8
#define ASCII_TERM_ATTRS_BLACK_FG 30
#define ASCII_TERM_ATTRS_RED_FG 31
#define ASCII_TERM_ATTRS_GREEN_FG 32
#define ASCII_TERM_ATTRS_YELLOW_FG 33
#define ASCII_TERM_ATTRS_BLUE_FG 34
#define ASCII_TERM_ATTRS_MAGENTA_FG 35
#define ASCII_TERM_ATTRS_CYAN_FG 36
#define ASCII_TERM_ATTRS_WHITE_FG 37
#define ASCII_TERM_ATTRS_BLACK_BG 40
#define ASCII_TERM_ATTRS_RED_BG 41
#define ASCII_TERM_ATTRS_GREEN_BG 42
#define ASCII_TERM_ATTRS_YELLOW_BG 43
#define ASCII_TERM_ATTRS_BLUE_BG 44
#define ASCII_TERM_ATTRS_MAGENTA_BG 45
#define ASCII_TERM_ATTRS_CYAN_BG 46
#define ASCII_TERM_ATTRS_WHITE_BG 47
